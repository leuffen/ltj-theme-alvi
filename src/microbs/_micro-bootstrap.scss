@use "sass:math";

@import "defaults";

.d-none {
    display: none !important;
}

.d-block {
    display: block !important;
}

.d-flex {
    display: flex !important;
}

.d-inline-flex {
    display: inline-flex !important;
}

// Padding, Margin, Gap Utilities
// Assuming a scale where 1 = 0.25rem, 2 = 0.5rem, etc.
@for $i from 0 through 5 {
    .p-#{$i} {
        padding: $i * 0.25rem !important;
    }

    .pt-#{$i},
    .py-#{$i} {
        padding-top: $i * 0.25rem !important;
    }

    .pr-#{$i},
    .px-#{$i} {
        padding-right: $i * 0.25rem !important;
    }

    .pb-#{$i},
    .py-#{$i} {
        padding-bottom: $i * 0.25rem !important;
    }

    .pl-#{$i},
    .px-#{$i} {
        padding-left: $i * 0.25rem !important;
    }

    .m-#{$i} {
        margin: $i * 0.25rem !important;
    }

    .mt-#{$i},
    .my-#{$i} {
        margin-top: $i * 0.25rem !important;
    }

    .mr-#{$i},
    .mx-#{$i} {
        margin-right: $i * 0.25rem !important;
    }

    .mb-#{$i},
    .my-#{$i} {
        margin-bottom: $i * 0.25rem !important;
    }

    .ml-#{$i},
    .mx-#{$i} {
        margin-left: $i * 0.25rem !important;
    }

    .gap-#{$i} {
        gap: $i * 0.25rem !important;
    }
}

// Grid System
// Assuming a 12 column grid
@for $i from 1 through 12 {
    .col-#{$i} {
        flex: 0 0 auto;
        width: percentage(math.div($i, 12));
    }
}


$gutter-width: 15px !default;
.col {
    flex: 1 0 0%; // Occupy the available space equally
    max-width: 100%;
    padding-right: #{$gutter-width} / 2;
    padding-left: #{$gutter-width} / 2;
}

// Row class
.row {
    display: flex;
    flex-wrap: wrap;
    margin-right: calc(-1 * #{$gutter-width} / 2);
    margin-left: calc(-1 * #{$gutter-width} / 2);

    // Nested columns
    > [class*="col-"] {
        padding-right: calc(#{$gutter-width} / 2);
        padding-left: calc(#{$gutter-width} / 2);
    }
}

// Col-auto class
.col-auto {
    flex: 0 0 auto;
    width: auto;
    max-width: 100%;
}






// Mixin for responsive container widths
@mixin container-max-widths() {
  @each $breakpoint, $value in $breakpoints {
    @media (min-width: $value) {
      max-width: $value - ($container-margin * 2);
    }
  }
}

.container {
  width: 100%;
  padding-right: $container-margin;
  padding-left: $container-margin;
  margin-right: auto;
  margin-left: auto;

  @include container-max-widths();
}

.container, .container-fluid{
    width: 100%;
    padding-right: var(--bs-gutter-x, .75rem);
    padding-left: var(--bs-gutter-x, .75rem);
    margin-right: auto;
    margin-left: auto;
}

.flex-row {
    flex-direction: row !important;
}

.flex-column {
    flex-direction: column !important;
}

.flex-row-reverse {
    flex-direction: row-reverse !important;
}

.flex-column-reverse {
    flex-direction: column-reverse !important;
}

.justify-content-start {
    justify-content: flex-start !important;
}

.justify-content-end {
    justify-content: flex-end !important;
}

.justify-content-center {
    justify-content: center !important;
}

.justify-content-between {
    justify-content: space-between !important;
}

.justify-content-around {
    justify-content: space-around !important;
}

.justify-content-evenly {
    justify-content: space-evenly !important;
}

.align-items-start {
    align-items: flex-start !important;
}

.align-items-end {
    align-items: flex-end !important;
}

.align-items-center {
    align-items: center !important;
}

.align-items-baseline {
    align-items: baseline !important;
}

.align-items-stretch {
    align-items: stretch !important;
}
